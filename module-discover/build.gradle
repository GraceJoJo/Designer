if (Boolean.valueOf(rootProject.ext.isBuildModule)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
//kotlin扩展插件,无需findViewbyId
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//ARouter
kapt {
    arguments {
        arg("moduleName", project.getName())
    }
    generateStubs = true
}
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        //MultiDex分包方法
        multiDexEnabled true
        ndk {
            //APP的build.gradle设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a'
        }
        //支持DataBinding
        dataBinding {
            enabled = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，可以指定哪些源文件
    //（ 或文件夹下的源文件 ） 要被编译 ， 哪些源文件要被排除 。
    sourceSets {
        main {
            if (Boolean.valueOf(rootProject.ext.isBuildModule)) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":common-base")
    implementation project(":common-ui")
    //ARouter
    kapt rootProject.ext.dependencies["arouter-compiler"]
    //解决Kotlin和DataBinding冲突
//    kapt 'androidx.databinding:databinding-compiler:1.0.0'
    //butterknife-compiler
    implementation rootProject.ext.dependencies["butterknife-compiler"]
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    kapt rootProject.ext.dependencies["dagger-compiler"]
    //video
    api rootProject.ext.dependencies["gsyvideo-player"]
}

repositories {
    mavenCentral()
}
